version: '3.8'

services:
  # сервис базы данных PostgreSQL
  postgres:
    image: postgres:latest  # официальный образ PostgreSQL
    restart: always  # автоматический перезапуск при сбоях
    environment:
      POSTGRES_DB: brocker  # название базы данных
      POSTGRES_USER: postgres  # имя пользователя
      POSTGRES_PASSWORD: pass  # пароль пользователя
    ports:
      - "5432:5432"  # пробрасывает порт для внешнего доступа к PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data  # хранение данных PostgreSQL вне контейнера

  # сервис для Zookeeper (нужен для работы Kafka)
  zookeeper:
    image: wurstmeister/zookeeper:latest  # образ Zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181  # порт для подключения клиентов
    ports:
      - "2181:2181"  # пробрасывает порт Zookeeper для внешнего подключения

  # сервис для Kafka (брокер сообщений)
  kafka:
    image: wurstmeister/kafka:latest  # используем официальный образ Kafka
    environment:
      KAFKA_BROKER_ID: 1  # задаем уникальный идентификатор брокера Kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # указываем, как Kafka будет подключаться к Zookeeper
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # адрес для Kafka внутри Docker-сети
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092  # указываем порт для внешних подключений
      KAFKA_CREATE_TOPICS: "credit-requests:1:1"  # создаем топик "credit-requests" с 1 партицией и 1 репликой
    ports:
      - "9092:9092"  # пробрасываем порт для внешнего доступа к Kafka
    depends_on:
      - zookeeper  # Kafka будет запущен только после Zookeeper

  # сервис обработки кредитных заявок (работает с Kafka)
  credit-service:
    build:
      context: ./service-credit  # путь к директории с Dockerfile для сервиса
      dockerfile: Dockerfile  # используем стандартное имя Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092  # подключение к Kafka внутри Docker-сети
    depends_on: # запуск после
      - kafka  # Kafka
      - processing-service # и processing-service
    ports:
      - "8081:8080"

  # сервис обработки других данных (если требуется)
  processing-service:
    build:
      context: ./service-processing  # путь к директории с Dockerfile
      dockerfile: Dockerfile  # используем стандартное имя Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092  # подключение к Kafka внутри Docker-сети
    depends_on: # контейнер processing-servic запустить:
      - kafka  # после Kafka
      - postgres # после postgres

  # сервис для RabbitMQ (очередь сообщений)
  rabbitmq:
    image: rabbitmq:management  # образ RabbitMQ с веб-интерфейсом управления
    environment:
      RABBITMQ_DEFAULT_USER: guest  # логин по умолчанию
      RABBITMQ_DEFAULT_PASS: guest  # пароль по умолчанию
    ports:
      - "15672:15672"  # веб-интерфейс RabbitMQ
      - "5672:5672"  # основной порт RabbitMQ

# определение томов для хранения данных PostgreSQL
volumes:
  postgres_data: